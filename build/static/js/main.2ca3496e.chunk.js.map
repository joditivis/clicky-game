{"version":3,"sources":["components/Wrapper/index.js","components/Score/index.js","components/Card/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Score","score","highScore","message","Card","key","id","onClick","handleClick","clicked","alt","name","src","image","App","state","disneyCards","cardShuffle","forEach","i","setState","sort","Math","random","newScore","newHighScore","this","map","disney","Component","ReactDOM","render","document","getElementById"],"mappings":"s/CAOeA,G,MAJC,SAAAC,GAAK,OACjB,yBAAKC,UAAU,WAAWD,EAAME,YCOrBC,G,MARD,SAAAH,GAAK,OACf,yBAAKC,UAAU,cACX,yBAAKA,UAAU,SAAf,UAA+BD,EAAMI,MAArC,KACA,yBAAKH,UAAU,aAAf,eAAwCD,EAAMK,UAA9C,KACA,yBAAKJ,UAAU,WAAWD,EAAMM,QAAhC,QCUOC,G,MAdF,SAAAP,GAAK,OACd,yBACIC,UAAU,oBACVO,IAAKR,EAAMS,GACXC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMS,GAAIT,EAAMY,WAE7C,yBACIC,IAAKb,EAAMc,KACXC,IAAKf,EAAMgB,MACXP,GAAIT,EAAMS,Q,OCqEXQ,E,2MAzEXC,MAAQ,CACJC,cACAf,MAAO,EACPC,UAAW,EACXC,QAAS,+C,EAGbK,YAAc,SAACF,EAAIG,GACf,IAAMQ,EAAc,EAAKF,MAAMC,YAE/B,GAAIP,EAIA,OAHAQ,EAAYC,SAAQ,SAACL,EAAOM,GACxBF,EAAYE,GAAGV,SAAU,KAEtB,EAAKW,SAAS,CACjBP,MAAOI,EAAYI,MAAK,kBAAMC,KAAKC,SAAW,MAC9CpB,QAAS,qEACTF,MAAO,IAGXgB,EAAYC,SAAQ,SAACL,EAAOM,GACpBb,IAAOO,EAAMP,KACbW,EAAYE,GAAGV,SAAU,MAH9B,MAO0B,EAAKM,MAA1Bb,EAPL,EAOKA,UACFsB,EARH,EAOgBvB,MACM,EACnBwB,EAAeD,EAAWtB,EAAYsB,EAAWtB,EAEvD,OAAO,EAAKkB,SAAS,CACjBP,MAAOI,EAAYI,MAAK,kBAAMC,KAAKC,SAAW,MAC9CpB,QAAS,GACTF,MAAOuB,EACPtB,UAAWuB,K,wEAKd,IAAD,OACL,OACI,yBAAK3B,UAAU,OACd,yBAAKA,UAAU,2BACX,4BAAQA,UAAU,aACd,wBAAIA,UAAU,SAAd,uBAGJ,kBAAC,EAAD,KACA,yBAAKA,UAAU,QACX,kBAAC,EAAD,CACIG,MAAOyB,KAAKX,MAAMd,MAClBC,UAAWwB,KAAKX,MAAMb,UACtBC,QAASuB,KAAKX,MAAMZ,UAExB,yBAAKL,UAAU,iBACV4B,KAAKX,MAAMC,YAAYW,KAAI,SAAAC,GAAM,OAC9B,kBAAC,EAAD,CACAtB,GAAIsB,EAAOtB,GACXD,IAAKuB,EAAOtB,GACZO,MAAOe,EAAOf,MACdJ,QAASmB,EAAOnB,QAChBD,YAAa,EAAKA,0B,GA/D5BqB,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2ca3496e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => (\n    <div className=\"wrapper\">{props.children}</div>\n);\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Score = props => (\n    <div className=\"totalScore\">\n        <div className=\"score\">Score: {props.score} </div>\n        <div className=\"highScore\">High Score: {props.highScore} </div>\n        <div className=\"message\">{props.message} </div>\n    </div>\n);\n\nexport default Score;","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => (\n    <div \n        className=\"allCards col-md-2\"\n        key={props.id}\n        onClick={() => props.handleClick(props.id, props.clicked)}\n        >\n            <img \n                alt={props.name} \n                src={props.image} \n                id={props.id} \n            />\n    </div>\n);\n\nexport default Card;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport Card from \"./components/Card\";\nimport disneyCards from \"./cards.json\";\n\nclass App extends Component {\n\n    state = {\n        disneyCards,\n        score: 0,\n        highScore: 0,\n        message: \"Try to avoid clicking the same movie twice!\"\n    };\n\n    handleClick = (id, clicked) => {\n        const cardShuffle = this.state.disneyCards;\n        \n        if (clicked) {\n            cardShuffle.forEach((image, i) => {\n                cardShuffle[i].clicked = false;\n            });\n            return this.setState({\n                image: cardShuffle.sort(() => Math.random() - 0.5),\n                message: \"Oops, you already clicked that movie! Click a movie to play again.\",\n                score: 0\n            })\n        } else {\n            cardShuffle.forEach((image, i) => {\n                if (id === image.id) {\n                    cardShuffle[i].clicked = true;\n                }\n            });\n\n            const { highScore, score } = this.state;\n            const newScore = score + 1;\n            const newHighScore = newScore > highScore ? newScore : highScore;\n\n            return this.setState({\n                image: cardShuffle.sort(() => Math.random() - 0.5),\n                message: \"\",\n                score: newScore,\n                highScore: newHighScore\n            });\n        };\n    };\n\n   render() {\n       return (\n           <div className=\"App\">\n            <div className=\"container app-container\">\n                <header className=\"jumbotron\">\n                    <h1 className=\"title\">Disney Memory Game</h1>\n                </header>\n\n                <Wrapper>\n                <div className=\"card\">\n                    <Score\n                        score={this.state.score} \n                        highScore={this.state.highScore}\n                        message={this.state.message}>\n                    </Score>\n                    <div className=\"row cards-row\">\n                        {this.state.disneyCards.map(disney => (\n                            <Card\n                            id={disney.id}\n                            key={disney.id}\n                            image={disney.image}\n                            clicked={disney.clicked}\n                            handleClick={this.handleClick}\n                            />\n                        ))}\n                    </div>\n                </div>\n                </Wrapper>\n                </div>\n            </div>\n       );\n   }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}